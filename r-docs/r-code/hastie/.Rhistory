install.packages(c("openssl", "rstudioapi"))
x <- c(1, 2, 3, 4, 5)
x
x <- c(1, 2, 3, 4, 5)
x
ls()
rm(x)
ls()
clear
y = x
f = outer(x, y, function(x,y) cos(y)/(1+x^2))
contour(x, y, f)
x=seq(1,10)
y = x
f = outer(x, y, function(x,y) cos(y)/(1+x^2))
contour(x, y, f)
contour(x,y,f,nlevels =45,add=T)
fa=(f-t(f))/2
contour(x,y,fa,nlevels =15)
y = x
f = outer(x, y, function(x,y) cos(y)/(1+x^2))
contour(x, y, f)
contour(x, y, f, nlevels = 45, add = T)
fa = (f - t(f))/2
contour(x, y, fa, nlevels = 15)
image(x,y,fa)
persp(x,y,fa)
persp(x,y,fa,theta=30)
persp(x,y,fa,theta=30,phi=20)
persp(x,y,fa,theta=30,phi=70)
persp(x,y,fa,theta=30,phi=40)
curve(82*x, from=0, to=10, xlab="flexibility", ylab="MSE", col="white")
curve(300*cos(x/3)+500+x^3/3, add=TRUE, col="red", lwd=2)  # test error
curve(x^3/3, add=TRUE, col="orange", lwd=2)                # variance
curve(0*x+250, add=TRUE, col="gray", lwd=2)                # irreducible error
curve(300*cos(x/3)+350, add=TRUE, col="green", lwd=2)      # bias
curve(225*cos(x/3)+450, add=TRUE, col="blue", lwd=2)       # train error
image(x,y,fa) # This provides a heatmap
persp(x,y,fa) # This provides a three dimensional plot
persp(x,y,fa,theta=30)
persp(x,y,fa,theta=30,phi=20)
persp(x,y,fa,theta=30,phi=70)
persp(x,y,fa,theta=30,phi=40)
x = seq(1,10)
y = x
f = outer(x, y, function(x,y) cos(y)/(1+x^2))
contour(x, y, f)
contour(x, y, f, nlevels = 45, add = T)
fa = (f - t(f))/2
contour(x, y, fa, nlevels = 15)
image(x,y,fa) # This provides a heatmap
persp(x,y,fa) # This provides a three dimensional plot
persp(x,y,fa,theta=30)
persp(x,y,fa,theta=30,phi=20)
persp(x,y,fa,theta=30,phi=70)
persp(x,y,fa,theta=30,phi=40)
college <- read_csv("College.csv")
library(tidyverse)
college <- read_csv("College.csv")
View(college)
fix(college)
as.tibble(college)
head(college)
glimpse(college)
head(college)
college <- read_csv("College.csv")
college_t <- as.tibble(college)
is just a row of names, don't want to treat this like data.
rownames(college) = college[,1]
fix(college)
View(college)
View(college_t)
college = college [,-1]
View(college)
fix(college)
library(tidyverse)
# Creating two different datasets so that I can use readr/dplyr on the one and baseR commands on the other. Just to see how these actually compare.
college <- read_csv("College.csv")
college_tbl <- as.tibble(college)
# First row is just a row of names, don't want to treat this like data.
rownames(college) = college[,1]
fix(college) # This command allows us to view the dataset.
college = college [,-1]
# In the tidyverse we can also perform this command by using rownames_to_column
college_tbl <- as.tibble(rownames_to_column(college))
library(tidyverse)
# Creating two different datasets so that I can use readr/dplyr on the one and baseR commands on the other. Just to see how these actually compare.
college <- read_csv("College.csv")
college_tbl <- as.tibble(college)
# First row is just a row of names, don't want to treat this like data.
rownames(college) = college[,1]
fix(college) # This command allows us to view the dataset.
college = college [,-1]
# In the tidyverse we can also perform this command by using rownames_to_column
college_tbl <- as.tibble(rownames_to_column(college))
View(college_tbl)
# In the tidyverse we can also perform this command by using rownames_to_column
college_tbl <- as.tibble(rownames_to_column(college, var = "Colleges"))
View(college_tbl)
college_tbl <- as.tibble(column_to_rownames(college, var = "Colleges"))
View(college_tbl)
library(tidyverse)
# Creating two different datasets so that I can use readr/dplyr on the one and baseR commands on the other. Just to see how these actually compare.
college <- read_csv("College.csv")
college_tbl <- as.tibble(college)
# First row is just a row of names, don't want to treat this like data.
rownames(college) = college[,1]
fix(college) # This command allows us to view the dataset.
college = college [,-1]
# In the tidyverse we can also perform this command by using rownames_to_column
college_tbl <- as.tibble(column_to_rownames(college_tbl, var = "Colleges"))
View(college_tbl)
library(tidyverse)
# Creating two different datasets so that I can use readr/dplyr on the one and baseR commands on the other. Just to see how these actually compare.
college <- read_csv("College.csv")
college_tbl <- as.tibble(college)
# First row is just a row of names, don't want to treat this like data.
rownames(college) = college[,1]
#fix(college) # This command allows us to view the dataset.
college = college [,-1]
# In the tidyverse we can also perform this command by using rownames_to_column
college_tbl <- as.tibble(rownames_to_column(college_tbl, var = "Colleges"))
View(college_tbl)
library(tidyverse)
# Creating two different datasets so that I can use readr/dplyr on the one and baseR commands on the other. Just to see how these actually compare.
college <- read_csv("College.csv")
college_tbl <- as.tibble(college)
# First row is just a row of names, don't want to treat this like data.
rownames(college) = college[,1]
#fix(college) # This command allows us to view the dataset.
college = college [,-1]
# In the tidyverse we can also perform this command by using rownames_to_column
college_tbl <- as.tibble(column_to_rownames(college_tbl, var = "Colleges"))
View(college_tbl)
View(college_tbl)
library(tidyverse)
# Creating two different datasets so that I can use readr/dplyr on the one and baseR commands on the other. Just to see how these actually compare.
college <- read_csv("College.csv")
college_tbl <- as.tibble(college)
# First row is just a row of names, don't want to treat this like data.
rownames(college) = college[,1]
#fix(college) # This command allows us to view the dataset.
college = college [,-1]
# In the tidyverse we can also perform this command by using rownames_to_column
college_tbl <- as.tibble(rownames_to_column(college_tbl, var = "Colleges"))
View(college_tbl)
library(tidyverse)
# Creating two different datasets so that I can use readr/dplyr on the one and baseR commands on the other. Just to see how these actually compare.
college <- read_csv("College.csv")
college_tbl <- as.tibble(college)
# First row is just a row of names, don't want to treat this like data.
rownames(college) = college[,1]
#fix(college) # This command allows us to view the dataset.
college = college [,-1]
has_rownames(college_tbl)
head(college_tbl)
college_tbl <- as.tibble(rownames_to_column(college_tbl, var = "X1"))
college_tbl <- as.tibble(column_to_rownames(college_tbl, var = "X1"))
View(college_tbl)
library(tidyverse)
# Creating two different datasets so that I can use readr/dplyr on the one and baseR commands on the other. Just to see how these actually compare.
college <- read_csv("College.csv")
college_tbl <- as.tibble(college)
# First row is just a row of names, don't want to treat this like data.
rownames(college) = college[,1]
#fix(college) # This command allows us to view the dataset.
college = college [,-1]
# In the tidyverse we can also perform this command by using rownames_to_column
college_tbl <- as.tibble(column_to_rownames(college_tbl, var = "X1"))
summary(college)
summary(college_tbl)
library(tidyverse)
# Creating two different datasets so that I can use readr/dplyr on the one and baseR commands on the other. Just to see how these actually compare.
college <- read_csv("College.csv")
college_tbl <- as.tibble(college)
# First row is just a row of names, don't want to treat this like data.
rownames(college) = college[,1]
#fix(college) # This command allows us to view the dataset.
college = college [,-1]
# In the tidyverse we can also perform this command by using rownames_to_column
#college_tbl <- as.tibble(column_to_rownames(college_tbl, var = "X1"))
summary(college)
summary(college_tbl)
pairs(college_tbl, [,1:10])
pairs(college_tbl[,1:10])
pairs(college_tbl[,2:10])
pairs(college_tbl[,3:11])
library(tidyverse)
# Creating two different datasets so that I can use readr/dplyr on the one and baseR commands on the other. Just to see how these actually compare.
college <- read_csv("College.csv")
college_tbl <- as.tibble(college)
# First row is just a row of names, don't want to treat this like data.
rownames(college) = college[,1]
#fix(college) # This command allows us to view the dataset.
college = college [,-1]
# In the tidyverse we can also perform this command by using rownames_to_column
college_tbl <- as.tibble(column_to_rownames(college_tbl, var = "X1"))
summary(college)
summary(college_tbl)
pairs(college[,1:10])
library(tidyverse)
# Creating two different datasets so that I can use readr/dplyr on the one and baseR commands on the other. Just to see how these actually compare.
college <- read_csv("College.csv")
college_tbl <- as.tibble(college)
# First row is just a row of names, don't want to treat this like data.
rownames(college) = college[,1]
#fix(college) # This command allows us to view the dataset.
college = college [,-1]
# In the tidyverse we can also perform this command by using rownames_to_column
college_tbl <- as.tibble(column_to_rownames(college_tbl, var = "X1"))
summary(college)
summary(college_tbl)
pairs(college[,1:10])
library(tidyverse)
# Creating two different datasets so that I can use readr/dplyr on the one and baseR commands on the other. Just to see how these actually compare.
college <- read_csv("College.csv")
college_tbl <- as.tibble(college)
# First row is just a row of names, don't want to treat this like data.
rownames(college) = college[,1]
#fix(college) # This command allows us to view the dataset.
college = college [,-1]
# In the tidyverse we can also perform this command by using rownames_to_column
college_tbl <- as.tibble(column_to_rownames(college_tbl, var = "X1"))
summary(college)
summary(college_tbl)
pairs(college[,2:10])
View(college)
college_tbl %>% pairs(2:10)
college_tbl %>% pairs(3:10)
college_tbl %>% pairs(4:10)
college_tbl %>% pairs[4:10]
college_tbl %>% pairs(college_tbl[4:10])
college_tbl %>% pairs(college_tbl[4:10])
library(ISLR)
install.packages("ISLR")
library(MASS)
library(ISLR)
lm.fit = lm(medv~lstat)
library(ISLR)
fix(Boston)
lm.fit = lm(medv~lstat)
install.packages("ISLR")
install.packages("ISLR")
install.packages("XQuartz")
library(MASS)
library(ISLR)
fix(Boston)
install.packages("ISLR")
install.packages("ISLR")
fix(Boston)
fix(Boston)
lm.fit = lm(medv~lstat)
names(Boston)
fix(Boston)
library(MASS)
library(ISLR)
fix(Boston)
library(MASS)
library(ISLR)
fix(Boston)
names(Boston)
lm.fit = lm(medv~lstat)
library(MASS)
library(ISLR)
fix(Boston)
names(Boston)
lm.fit = lm(medv~lstat)
names(Boston)
lm.fit = lm(medv~lstat, Boston)
summary(lm.fit)
coef(lm.fit)
confint(lm.fit) # Provides the confidence interval
abline(lm.fit)
plot(lstat ,medv)
a
names(Boston)
attach(Boston)
lm.fit = lm(medv~lstat)
summary(lm.fit)
coef(lm.fit) # This gives the coefficients of the linear regression
confint(lm.fit) # Provides the confidence interval
plot(lstat ,medv)
abline(lm.fit)
x = seq(1,10)
y = x
f = outer(x, y, function(x,y) cos(y)/(1+x^2))
contour(x, y, f)
contour(x, y, f, nlevels = 45, add = T)
fa = (f - t(f))/2
contour(x, y, fa, nlevels = 15)
image(x,y,fa) # This provides a heatmap
persp(x,y,fa) # This provides a three dimensional plot
persp(x,y,fa,theta=30)
persp(x,y,fa,theta=30,phi=20)
persp(x,y,fa,theta=30,phi=70)
persp(x,y,fa,theta=30,phi=40)
curve(82*x, from=0, to=10, xlab="flexibility", ylab="MSE", col="white")
curve(300*cos(x/3)+500+x^3/3, add=TRUE, col="red", lwd=2)  # test error
curve(x^3/3, add=TRUE, col="orange", lwd=2)                # variance
curve(0*x+250, add=TRUE, col="gray", lwd=2)                # irreducible error
curve(300*cos(x/3)+350, add=TRUE, col="green", lwd=2)      # bias
curve(225*cos(x/3)+450, add=TRUE, col="blue", lwd=2)       # train error
A = matrix(1:16,4,4)
A
A[2,3]
A[c(1,3),c(2,4)]
A[1:3,2:4]
A[1:2,]
A[,1:2]
A[1,]
A[-c(1,3),]
A[-c(1,3),-c(1,3,4)]
dim(A)
x <- c(1,3,2,5)
x = c(1,6,2)
y = c(1,4,3)
length(x)
length(y)
x+y
ls()
rm(x,y)
ls()
rm(list=ls())
?matrix
x=matrix(data=c(1,2,3,4), nrow=2, ncol=2)
x
x=matrix(c(1,2,3,4),2,2)
matrix(c(1,2,3,4),2,2,byrow=TRUE)
sqrt(x)
x^2
x=rnorm(50)
y=x+rnorm(50,mean=50,sd=.1)
cor(x,y)
set.seed(1303)
rnorm(50)
set.seed(3)
y=rnorm(100)
mean(y)
var(y)
sqrt(var(y))
sd(y)
x = seq(1,10)
y = x
f = outer(x, y, function(x,y) cos(y)/(1+x^2))
contour(x, y, f)
contour(x, y, f, nlevels = 45, add = T)
fa = (f - t(f))/2
contour(x, y, fa, nlevels = 15)
image(x,y,fa) # This provides a heatmap
persp(x,y,fa) # This provides a three dimensional plot
persp(x,y,fa,theta=30)
persp(x,y,fa,theta=30,phi=20)
persp(x,y,fa,theta=30,phi=70)
persp(x,y,fa,theta=30,phi=40)
curve(82*x, from=0, to=10, xlab="flexibility", ylab="MSE", col="white")
curve(300*cos(x/3)+500+x^3/3, add=TRUE, col="red", lwd=2)  # test error
curve(x^3/3, add=TRUE, col="orange", lwd=2)                # variance
curve(0*x+250, add=TRUE, col="gray", lwd=2)                # irreducible error
curve(300*cos(x/3)+350, add=TRUE, col="green", lwd=2)      # bias
curve(225*cos(x/3)+450, add=TRUE, col="blue", lwd=2)       # train error
A = matrix(1:16,4,4)
A
A[2,3]
A[c(1,3),c(2,4)]
A[1:3,2:4]
A[1:2,]
A[,1:2]
A[1,]
A[-c(1,3),]
A[-c(1,3),-c(1,3,4)]
dim(A)
# Creating two different datasets so that I can use readr/dplyr on the one and baseR commands on the other. Just to see how these actually compare.
college <- read_csv("College.csv")
library(tidyverse)
# Creating two different datasets so that I can use readr/dplyr on the one and baseR commands on the other. Just to see how these actually compare.
college <- read_csv("College.csv")
college_tbl <- as.tibble(college)
# First row is just a row of names, don't want to treat this like data.
rownames(college) = college[,1]
#fix(college) # This command allows us to view the dataset.
college = college [,-1]
# In the tidyverse we can also perform this command by using rownames_to_column
college_tbl <- as.tibble(column_to_rownames(college_tbl, var = "X1"))
summary(college)
summary(college_tbl)
pairs(college[,2:10])
library(tidyverse)
# Creating two different datasets so that I can use readr/dplyr on the one and baseR commands on the other. Just to see how these actually compare.
college <- read_csv("College.csv")
college_tbl <- as.tibble(college)
head(college_tbl)
head(college)
head(college)
x <- c(1,3,2,5)
x = c(1,6,2)
y = c(1,4,3)
length(x)
length(y)
x+y
ls()
rm(x,y)
ls()
rm(list=ls())
?matrix
x=matrix(data=c(1,2,3,4), nrow=2, ncol=2)
y = c(1,4,3)
length(x)
length(y)
x+y
x <- c(1,3,2,5)
x = c(1,6,2)
y = c(1,4,3)
length(x)
length(y)
x+y
ls()
rm(x,y)
ls()
rm(list=ls())
?matrix
x=matrix(data=c(1,2,3,4), nrow=2, ncol=2)
x
x=matrix(c(1,2,3,4),2,2)
matrix(c(1,2,3,4),2,2,byrow=TRUE)
sqrt(x)
x^2
x=rnorm(50)
y=x+rnorm(50,mean=50,sd=.1)
cor(x,y)
set.seed(1303)
rnorm(50)
set.seed(3)
y=rnorm(100)
mean(y)
var(y)
sqrt(var(y))
sd(y)
x = seq(1,10)
y = x
f = outer(x, y, function(x,y) cos(y)/(1+x^2))
contour(x, y, f)
contour(x, y, f, nlevels = 45, add = T)
fa = (f - t(f))/2
contour(x, y, fa, nlevels = 15)
image(x,y,fa) # This provides a heatmap
persp(x,y,fa) # This provides a three dimensional plot
persp(x,y,fa,theta=30)
